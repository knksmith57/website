"use strict";(self.webpackChunkcnoe=self.webpackChunkcnoe||[]).push([[1172],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>b});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=i,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(b,o(o({ref:t},s),{},{components:r})):n.createElement(b,o({ref:t},s))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2139:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:4,description:"IDP builder is a single binary IDP launcher.",title:"idpBuilder CLI"},o="Installation",l={unversionedId:"reference-implementation/idpbuilder/idpbuilder",id:"reference-implementation/idpbuilder/idpbuilder",title:"idpBuilder CLI",description:"IDP builder is a single binary IDP launcher.",source:"@site/docs/reference-implementation/idpbuilder/idpbuilder.md",sourceDirName:"reference-implementation/idpbuilder",slug:"/reference-implementation/idpbuilder/",permalink:"/docs/reference-implementation/idpbuilder/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference-implementation/idpbuilder/idpbuilder.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"IDP builder is a single binary IDP launcher.",title:"idpBuilder CLI"},sidebar:"tutorialSidebar",previous:{title:"Verifications",permalink:"/docs/reference-implementation/extensions/verification"},next:{title:"Architecture",permalink:"/docs/reference-implementation/idpbuilder/architecture/"}},c={},p=[{value:"IDP installation flow",id:"idp-installation-flow",level:2}],s={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"installation"},"Installation"),(0,i.kt)("admonition",{title:"github repo",type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://github.com/cnoe-io/idpbuilder"},"cnoe-io/idpbuilder"))),(0,i.kt)("h2",{id:"idp-installation-flow"},"IDP installation flow"),(0,i.kt)("p",null,"The idpbuilder cli installs a local internal developer portal using the following pattern"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a new Kind cluster if one doesnt exist or if ",(0,i.kt)("inlineCode",{parentName:"li"},"--recreate")," switch is passed."),(0,i.kt)("li",{parentName:"ol"},"Create a gitserver docker image with the embeded argocd application resources."),(0,i.kt)("li",{parentName:"ol"},"Create a new gitserver pod, service and ingress serving the argocd applications via the git protcol."),(0,i.kt)("li",{parentName:"ol"},"Install ArgoCD and configure it to be able to monitor the gitserver service."),(0,i.kt)("li",{parentName:"ol"},"Install Argo Project and Argo applications for the embeded Argo apps."),(0,i.kt)("li",{parentName:"ol"},"Argo apps are reconciled by ArgoCD."),(0,i.kt)("li",{parentName:"ol"},"Command line exits leaving the cluster running with the IDP install."),(0,i.kt)("li",{parentName:"ol"},"Backstage will become available on your localhost via an nginx ingress. Use kubectl to get the correct IDP address/hostname to connect to.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"Docker must be installed and available to the current user."),(0,i.kt)("li",{parentName:"ul"},"Internal Developer Portal components are installed as ArgoCD Applications."),(0,i.kt)("li",{parentName:"ul"},"The ArgoCD apps that are installed are embedded in the cli binary. See ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/cnoe-io/idpbuilder/blob/56089e4ae3b27cf90641bfbff2a96c36dd5263e1/pkg/controllers/localbuild/controller.go#L211-L243"},"cnoe-io/idpbuilder/pkg/controllers/localbuild/controller.go")))))}u.isMDXComponent=!0}}]);