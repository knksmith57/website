<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cnoe-io.github.io/blog</id>
    <title>CNOE Blog</title>
    <updated>2023-11-15T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://cnoe-io.github.io/blog"/>
    <subtitle>CNOE Blog</subtitle>
    <icon>https://cnoe-io.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Optimizing for Data Quality in your Developer Portal]]></title>
        <id>optimizing-data-quality-in-dev-portals</id>
        <link href="https://cnoe-io.github.io/blog/optimizing-data-quality-in-dev-portals"/>
        <updated>2023-11-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Disclaimer: CNOE makes strong assumptions about using a subset of open source technologies when building Internal Developer Platforms (IDPs). Recommendations made and patterns discussed are hence centered around the exact tooling that CNOE adopts to implement a capability within an IDP. In this particular post, we assume Kubernetes as the orchestrator platform, Backstage as the technology that implements the developer portal capability, Argo CD for continuous delivery, and Crossplane or Terraform for infrastructure as code (IaC). Capability and technology names may be used interchangeably in the blog post but practices discussed are primarily around the specific set of technologies named earlier.]]></summary>
        <content type="html"><![CDATA[<p><em>Disclaimer: CNOE makes strong assumptions about using a subset of open source technologies when building Internal Developer Platforms (IDPs). Recommendations made and patterns discussed are hence centered around the exact tooling that CNOE adopts to implement a capability within an IDP. In this particular post, we assume Kubernetes as the orchestrator platform, Backstage as the technology that implements the developer portal capability, Argo CD for continuous delivery, and Crossplane or Terraform for infrastructure as code (IaC). Capability and technology names may be used interchangeably in the blog post but practices discussed are primarily around the specific set of technologies named earlier.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="establishing-the-source-of-truth">Establishing the source of truth<a class="hash-link" href="#establishing-the-source-of-truth" title="Direct link to heading">​</a></h2><p>There are different approaches to representing entities like Kubernetes objects and cloud resources in Backstage. In such context, <em>platform engineers need to optimize for creation of reliable data</em>. The last thing you as a platform provider want to see happen is to lose trust of end users because you are displaying incorrect information. There are however, a number of key decisions to be made when building entity representations in Backstage. Particularly:</p><ol><li>What gets represented in Backstage and what doesn't</li><li>How to ensure the Backstage entity offers an accurate representation of its real world counterpart</li><li>What establishes the source of truth for an entity</li></ol><p>Embracing GitOps practices, the answer to that last question may sound rather trivial: <em>GIT, git is obviously the source of truth, since, you know ... GitOps!</em></p><p>However, while git represents the intended source of truth, truth is actually realized where the resource is deployed, revealing its beloved <em>resource status</em>. That is why you may hear people sarcastically refer to git as the <em>source of hope</em> in GitOps.</p><p>Our current collective of practices reveals that there is no silver bullet when deciding entity representations in a developer portal. What establishes the actual source of truth, from which Backstage entity representations to be drawn, primarily depends on company practices and tools DevOps teams have available to them.</p><p>If you operate a Hub and Spoke model, where a single control plane cluster is responsible for handling platform requirements and separate compute clusters handle the actual workload, the hub cluster could very well become the data source for the Backstage entities. On the other hand, if you operate a federated environment where control plane and data plane workloads are scattered across multiple clusters, Backstage could become the unifier that implements custom entity providers to pull and consolidate data from multiple data sources (i.e. the set of clusters with the right data). In a third approach, the CI may take on the job of hydrating entity definitions with metadata and status information it collects from several data sources, eventually pushing the constructed entity to another repository where it can be observed.</p><p>Next we discuss these approaches in more details.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-your-existing-cicd-pipelines-to-construct-the-source-of-truth">Use your existing CI/CD pipelines to construct the source of truth<a class="hash-link" href="#use-your-existing-cicd-pipelines-to-construct-the-source-of-truth" title="Direct link to heading">​</a></h2><p>Starting from the specification of entities and infrastructure resources in a
git repository, this approach utilizes tasks in the CI to hydrate entities with
information on entity relations, extra metadata, and status of deployed
resources. To avoid conflating user changes and automated CI changes, the
hydrated entities are often kept in a separate git repository that mirrors and
expands entities in the original git repository with intended application
specifications.</p><p>On the positive side:</p><ul><li>This is a relatively simple approach and works for smaller teams with smaller number of applications or systems</li><li>Having a second git repository to capture the end state of an entity stays closer to the core GitOps practices</li><li>Does not require significant modification to the developer portal</li></ul><p>On the negative side:</p><ul><li>There is inherent duplications that are happening</li><li>Adding custom metadata by application teams is not as trivial as it requires making changes to the integration workflow, thus bringing load and demand to the DevOps teams</li><li>Less abstraction in place as end application users are directly exposed to the yaml specification of the entities</li><li>Does not scale well as the number of systems and entities grow</li></ul><p><img loading="lazy" alt="ci-as-source-of-truth" src="/assets/images/ci-as-sot-aab3827d5d0bf81df84c59e6f703b5c1.png" width="1904" height="848" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-a-central-control-plane-as-the-source-of-truth">Use a central control plane as the source of truth<a class="hash-link" href="#use-a-central-control-plane-as-the-source-of-truth" title="Direct link to heading">​</a></h2><p>The hub and spoke model is the most advocated for model when applying GitOps practices. Your control plane cluster runs and manages your platform tools, your CI, your CD, developer portal, infrastructure as code tooling, etc.</p><p>On the positive side:</p><ul><li>There really is a single place to inspect the status of entities. E.g., Argo applications can tell you the status of deployed applications. You can also inspect the status of workflows, infrastructure resources, and any other entity that the control plane cluster manages.</li><li>You can use the Backstage Kubernetes plugin seamlessly and maybe with some little tweaks. Alternatively this can be achieved by introducing fairly light-weight Backstage custom entity providers which pull and show the status of entities in the Backstage portal.</li><li>In an organization with a diverse set of distributed systems, the control plane cluster can be used as the integration layer by wrapping legacy APIs and or implementing native controllers.</li></ul><p>On the negative side:</p><ul><li>Most organizations do not have a central control plane and adopting one as the source of truth is often a significant change, especially if an organization is early in their GitOps transition.</li><li>For organizations deep into a federated model of operation with different teams running and managing their platforms separately and rather independently, it could be challenging to offer a single control plane that aggregates data across all teams.</li><li>Management of change could become cumbersome. Existence of a single control plane could create bottlenecks where changes occur to a set of entities or practices. Changes in organizations or systems may result in changes to various entities managed across several teams. Bringing GitOps practices to the mix, this requires chains of approvals to happen across multiple entities and across several repositories for deployments to start flowing. Depending on the size of the organization, this could lead to organizational nightmares.</li><li>You may need to jump through a few hoops before getting from the representation of the application, to the actual deployment of it, e.g., going from git to your continuous delivery and from there to your target cluster.</li></ul><p><img loading="lazy" alt="controlplane-as-source-of-truth" src="/assets/images/cp-as-sot-3f037de15fbbdfc86df959d57029b7d3.png" width="2578" height="1146" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="use-backstage-as-the-source-of-truth">Use Backstage as the source of truth<a class="hash-link" href="#use-backstage-as-the-source-of-truth" title="Direct link to heading">​</a></h2><p>Where control planes and compute workloads are scattered, the unifying layer lies in the developer portal, i.e. Backstage. Hence, it is reasonable to construct an entity by collecting and aggregating data from various data sources, each providing partial data on the entity, making Backstage be the source of truth. This generally starts with Backstage querying git for the entities that exist. Then using the identifiers for the entities to collect metadata on how the entity contributes to a system. This could involve querying the control plane clusters and the workload clusters via some custom entity provider that looks for certain information and putting collected pieces together to come close to the core promise of a developer portal, <em>providing reliable information</em> on the entities.</p><p>On the positive side:</p><ul><li>This model copes better with legacy systems</li><li>Users are not exposed to and often times not even aware of the underlying platforms, hence underlying platform and tooling is more rigorously abstracted away</li><li>Changes to the system are only isolated to the entities of the particular system as managed by the underlying resources and platform. This causes less chaos when definitions, metadata, or properties of entities need to change.</li></ul><p>On the negative side:</p><ul><li>The git service may not be able to scale, technically or financially.  This is particularly because Backstage may hit the git service endpoints too frequently and exceed the API limits. This could cause delays in displaying data for end users or display wrong information if partially available data is mishandled. This can be mitigated via approaches like using an eventing mechanism to notify Backstage of changes, or alternatively to store entity definitions in an alternative storage space (e.g. Amazon S3). There are challenges to such approaches too, for example when using Amazon S3, change history will be lost. Also, using an eventing mechanism could introduce security challenges that we discuss next.</li><li>Securing Backstage could be a challenge. For Backstage to proactively receive updates on entity changes, it would work best to configure event hooks to provide callbacks to Backstage when changes occur. Backstage, being the entry point for user workflows, sits on the critical path of platform operations. As such, platform engineers need to solve for a chicken and egg problem by deciding how to expose Backstage endpoints to receive events and yet to limit access for security reasons. The authentication methods that GitHub supports may not satisfy the security standards that an organization requires.</li><li>Changes to entities may not be as trivial. DevOps engineers need to manage entities that they may not control. For example, if a new mandatory field is introduced to a catalog file, DevOps engineers may need to talk to the respective repository owners, create a PR, then get approval for all affected repositories.</li></ul><p><img loading="lazy" alt="backstage-as-source-of-truth" src="/assets/images/bg-as-sot-aa6d086d3fe6ab09d3e266c149266c76.png" width="2342" height="984" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>We discussed multiple approaches to creating reliable representation of system entities in the developer portals. We do not necessarily recommend one approach over another, but it is important to find the right approach given the patterns and practices in your organization. It is also worth noting that you can choose to combine multiple approaches depending on the requirements of your teams. For example, while continuous integration can still be used to construct the actual state of the world by collecting status data and other related information, Backstage extensions can be introduced to expand on entity relations, providing better representation of a system. Stating the obvious here, but your proper selection of patterns that work for you will go a long way in increasing your overall team velocity down the road.</p><p>Reach out on <a href="https://cloud-native.slack.com/archives/C05TN9WFN5S" target="_blank" rel="noopener noreferrer">#cnoe-interest</a> CNCF slack channel to share thoughts and get involved in developing CNOE.</p>]]></content>
        <author>
            <name>Greg Haynes</name>
            <uri>https://github.com/greghaynes</uri>
        </author>
        <author>
            <name>Kyle Smith</name>
            <uri>https://github.com/knksmith57</uri>
        </author>
        <author>
            <name>Blake Romano</name>
            <uri>https://github.com/blakeromano</uri>
        </author>
        <author>
            <name>Manabu McCloskey</name>
            <uri>https://github.com/nabuskey</uri>
        </author>
        <author>
            <name>Jesse Sanford</name>
            <uri>https://github.com/jessesanford</uri>
        </author>
        <author>
            <name>Nima Kaviani</name>
            <uri>https://github.com/nimakaviani</uri>
        </author>
        <category label="backstage" term="backstage"/>
        <category label="dev portal" term="dev portal"/>
        <category label="data ingestion" term="data ingestion"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CNOE - A Joint Effort to Share Internal Developer Platform Tools and Best Practices.]]></title>
        <id>welcome</id>
        <link href="https://cnoe-io.github.io/blog/welcome"/>
        <updated>2023-10-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Adobe, Amazon Web Services, Autodesk, Salesforce, and Twilio have come together to launch an open source initiative for building internal developer platforms (IDPs). Cloud Native Operational Excellence (aka, CNOE, pronounced Kuh.noo) is a joint effort to share developer tooling, thoughts, and patterns to help organizations make informed technology choices and resolve common pain points. CNOE will enable organizations to navigate tooling sprawl and technology churn by coordinating contributions, offering tools, and providing neutral and unbiased guidance on technology choices to deliver internal developer platforms.]]></summary>
        <content type="html"><![CDATA[<p>Adobe, Amazon Web Services, Autodesk, Salesforce, and Twilio have come together to launch an open source initiative for building internal developer platforms (IDPs). Cloud Native Operational Excellence (aka, CNOE, pronounced Kuh.noo) is a joint effort to share developer tooling, thoughts, and patterns to help organizations make informed technology choices and resolve common pain points. CNOE will enable organizations to navigate tooling sprawl and technology churn by coordinating contributions, offering tools, and providing neutral and unbiased guidance on technology choices to deliver internal developer platforms.  </p><p>Developer productivity is increasingly important for organizations to compete in today’s fast-paced marketplace. To increase productivity, many organizations are taking a platform engineering approach to build internal developer platforms that abstract away complexity and enable faster, more secure software delivery. These internal developer platforms are long-term strategic investments, and the choice of open source technologies and architectures used to build these platforms can greatly impact their long-term success and viability. </p><p>CNOE is a community for organizations passionate about evolving experiences in developer productivity and efficiency. Contributors to this community are sharing their open source developer platform tooling choices to bring awareness to the best practices that have helped their respective teams. With such awareness comes alignment and the ability to de-risk their technology choices over the long term. </p><p>The CNOE community will navigate their operational technology decisions together, coordinate contributions, and offer guidance on which Cloud Native Computing Foundation (CNCF) technologies to use to achieve cloud efficiencies. CNOE will aim to: </p><p>Create an open source first strategy for internal developer platform capabilities, prioritizing CNCF technologies. </p><p>Build community alignment on technology choices and best practices. </p><p>Elevate tools and practices that can benefit a wide range of organizations building their own internal developer platforms. </p><p>Build for the infrastructure and customize to developer needs, making the solutions and patterns flexible for adoption. </p><p>Provide artifacts about tools, patterns, and practices to be easily consumable by the community.   </p><p>“The work of building secure, reliable, compliant, and regionalized software is becoming more and more complicated. Development teams need the right separation of concerns to build efficiently and move fast. Internal developer platforms enable just that. They abstract away complexity so a team can focus fully on their key goals. I’m excited to see the CNOE community share experiences, expand ideas beyond a single company’s viewpoint, and de-risk our technology strategies to build better together.” - Ben Cochran, VP Developer Enablement at Autodesk </p><p>"As a technology company, CNOE is an extension of our DNA, and open source is key to our platform. CNOE fosters collaboration within the industry, minimizes duplicated work, and emphasizes unique products. I'm eager to see our contributions to CNOE and others benefiting from it." - Chris Lyon, VP of Engineering Segment at Twilio. </p><p>"Open source software is a core component that many organizations leverage to power their internal developer platforms. Organizations often anchor on specific capabilities to power their developer platforms like Continuous Integration/Continuous Delivery, Infrastructure as Code, Service Mesh, Policy controls, Artifact management, and developer portals. As a result, they have been seeking a forum to share best practices and to share their findings on the tooling choices they have been using. I’m incredibly excited to see AWS contribute to CNOE and CNOE be the vehicle that creates industry alignment based on the intrinsic gravity of the tooling choices being made at scale.” - said Paul Roberts, Sr. Principal Solutions Architect at AWS. </p><p>“Adobe believes in the transformative power of open source software.  We are excited to be a founding member of CNOE and to partner with other industry thought leaders to define and share our vision of a cloud native stack for rapidly building Internal Developer Platforms.” - Dave Weinstein, VP of Engineering at Adobe. </p><p>“Salesforce is deeply engaged in the Open Source community, which was integral in building Hyperforce, a reimagination of our trusted platform architecture for the public cloud. Salesforce is honored to serve as a launch partner for CNOE, further advancing the adoption of open source technologies and assuring companies of sound technology decisions and sustained support for years to come.” - Josh Meier, Hyperforce Lead Architect </p><p>With the launch of CNOE, members will contribute tooling, plugins, and reference implementations that facilitate building internal developer platforms. Members are also releasing a capability map that captures key open technologies and their relevance in building internal developer platforms across these organizations. </p><p>As we move forward, each member organization will continue to share their approach on adopting and composing the tooling and technologies recommended by the CNOE working group to deliver on their IDPs.  </p><p>CNOE invites more companies to join us. To learn more about CNOE, visit <a href="https://cnoe.io" target="_blank" rel="noopener noreferrer">https://cnoe.io</a>, where we share extended details about patterns and practices we are developing. Explore options to get involved and contact us via the CNCF slack channel <a href="https://cloud-native.slack.com/archives/C05TN9WFN5S" target="_blank" rel="noopener noreferrer">#cnoe-public</a>.</p><p><em>Special thanks to the many people who helped with the launch, Andrew Lee, Omar Kahil, Ben Fields, Bryan Landes, Vikram Venkataraman, Rick Sostheim, Manabu McCloskey, Praseeda Sathaye, and Vara Bonthu from AWS, Rob Hilton (formerly AWS, now Google), Jesse Sanford, Greg Haynes, Mani Kandadai Venkatesh, Sara Mesing, and Brandon Leach from Autodesk, Jesse Adametz and Wes Medford from Twilio, Rohan Kapoor and Vikram Sethi from Adobe.</em></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="member-announcements">Member Announcements<a class="hash-link" href="#member-announcements" title="Direct link to heading">​</a></h3><ul><li>Announcement on the <a href="https://aws.amazon.com/blogs/opensource/cloud-native-operational-excellence-cnoe-a-joint-effort-to-share-internal-developer-platform-tools-and-best-practices" target="_blank" rel="noopener noreferrer">AWS Website</a></li><li>Announcement on the <a href="https://forums.autodesk.com/t5/engineering-hub-blog/cloud-native-operational-excellence-cnoe-a-joint-effort-to-share/ba-p/12282822" target="_blank" rel="noopener noreferrer">Autodesk
Website</a></li></ul>]]></content>
        <author>
            <name>Nima Kaviani</name>
            <uri>https://github.com/nimakaviani</uri>
        </author>
        <category label="launch" term="launch"/>
        <category label="hello" term="hello"/>
        <category label="cnoe" term="cnoe"/>
    </entry>
</feed>